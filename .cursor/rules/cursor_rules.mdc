---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Crawl4AI MCP**
    - Always use the Crawl4AI MCP server to reference documentation for libraries like Pydantic AI, Chromadb, LangGraph and Streamlit
    - For the tokens, always use 5000 tokens for your search
    - Only search 3 times maximum for any specific piece of documentation If you don’t get what you need, use Brave MPC server to perform a wider search.

- **Code Structure & Modularity**
    - Never create a file longer than 500 lines of code. If a file approaches this limit, refactor by splitting it into modules or helper files.
    - Organize code into clearly separated modules, grouped by feature or responsibility.
    - Use clear, consistent imports (prefer relative imports within packages).

- **Style & Conventions**
    - Use Python as the primary language.
    - Follow PEP8, use type hints, and format with `black`.
    - Use `pydantic` for data validation.
    - Use `FastAPI` for APIs and `SQLAlchemy` or `SQLModel` for ORM if applicable.
    - Write docstrings for every function using the Google style:
    ```python
    def example():
        """
        Brief summary.

        Args:
            param1 (type): Description.

        Returns:
            type: Description.
        """
    ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 